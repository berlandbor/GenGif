const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
const frames = [];
const framePreview = document.getElementById('frames-list');
const outputGif = document.getElementById('output-gif');
const colorPicker = document.getElementById('colorPicker');
const brushSize = document.getElementById('brushSize');
const frameDelay = document.getElementById('frameDelay');
const textOverlay = document.getElementById('textOverlay');

ctx.fillStyle = 'white';
ctx.fillRect(0, 0, canvas.width, canvas.height);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
let drawing = false;
ctx.lineCap = 'round';

canvas.addEventListener('mousedown', () => drawing = true);
canvas.addEventListener('mouseup', () => drawing = false);
canvas.addEventListener('mousemove', (event) => {
    if (!drawing) return;
    ctx.strokeStyle = colorPicker.value;
    ctx.lineWidth = brushSize.value;
    ctx.beginPath();
    ctx.moveTo(event.offsetX, event.offsetY);
    ctx.lineTo(event.offsetX + 1, event.offsetY + 1);
    ctx.stroke();
});

// üìå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏–π)
document.getElementById('upload').addEventListener('change', function (event) {
    const file = event.target.files[0];
    if (!file) {
        alert('–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω!');
        return;
    }

    const reader = new FileReader();
    reader.onload = function (e) {
        const img = new Image();
        img.onload = function () {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "white";
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            const aspectRatio = img.width / img.height;
            let newWidth = canvas.width;
            let newHeight = canvas.height;

            if (aspectRatio > 1) {
                newHeight = canvas.width / aspectRatio;
            } else {
                newWidth = canvas.height * aspectRatio;
            }

            const xOffset = (canvas.width - newWidth) / 2;
            const yOffset = (canvas.height - newHeight) / 2;

            ctx.drawImage(img, xOffset, yOffset, newWidth, newHeight);
        };
        img.src = e.target.result;
    };
    reader.readAsDataURL(file);
});

// üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
function addFrame() {
    const text = textOverlay.value.trim();

    // –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas
    const tempCanvas = document.createElement('canvas');
    tempCanvas.width = canvas.width;
    tempCanvas.height = canvas.height;
    const tempCtx = tempCanvas.getContext('2d');

    tempCtx.drawImage(canvas, 0, 0);

    if (text) {
        tempCtx.font = "20px Arial";
        tempCtx.fillStyle = "white";
        tempCtx.strokeStyle = "black";
        tempCtx.lineWidth = 3;
        tempCtx.textAlign = "center";
        tempCtx.textBaseline = "bottom";

        tempCtx.strokeText(text, canvas.width / 2, canvas.height - 10);
        tempCtx.fillText(text, canvas.width / 2, canvas.height - 10);
    }

    const frameData = tempCanvas.toDataURL("image/png", 0.8);
    frames.push(frameData);

    const img = document.createElement('img');
    img.src = frameData;
    framePreview.appendChild(img);
}

// üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GIF —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–∂–∞—Ç–∏–µ–º
function generateGIF() {
    if (frames.length === 0) {
        alert('–û—à–∏–±–∫–∞: –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–¥—Ä!');
        return;
    }

    const gif = new GIF({
        workers: 2,
        quality: 5,
        width: canvas.width,
        height: canvas.height
    });

    frames.forEach(frame => {
        const img = new Image();
        img.src = frame;
        gif.addFrame(img, { delay: Number(frameDelay.value) });
    });

    gif.on('finished', function (blob) {
        outputGif.src = URL.createObjectURL(blob);
    });

    gif.render();
}

// üìå –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–¥—Ä–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º GIF
let previewIndex = 0;
let previewInterval;

function previewAnimation() {
    if (frames.length === 0) {
        alert("–û—à–∏–±–∫–∞: –ù–µ—Ç –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!");
        return;
    }

    previewIndex = 0;
    clearInterval(previewInterval);

    previewInterval = setInterval(() => {
        outputGif.src = frames[previewIndex];
        previewIndex = (previewIndex + 1) % frames.length;
    }, Number(frameDelay.value));
}

// üìå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–¥—Ä–æ–≤
function stopPreview() {
    clearInterval(previewInterval);
}

// üìå –û—á–∏—Å—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤
function clearFrames() {
    frames.length = 0;
    framePreview.innerHTML = '';
    ctx.fillStyle = 'white';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    outputGif.src = "";
}

// üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ GIF
function downloadGIF() {
    if (!outputGif.src) {
        alert('–û—à–∏–±–∫–∞: –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ GIF!');
        return;
    }

    const link = document.createElement('a');
    link.href = outputGif.src;
    link.download = 'animation.gif';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}